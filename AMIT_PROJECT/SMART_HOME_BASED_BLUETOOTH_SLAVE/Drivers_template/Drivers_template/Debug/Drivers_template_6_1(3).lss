
Drivers_template_6_1(3).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b0  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000406  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cc  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020b  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_10>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 1000000UL
#include <util/delay.h>

int main()
{
	UART_init();
  92:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_init>
	UART_sendMsg("init_ok",7);
  96:	67 e0       	ldi	r22, 0x07	; 7
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	80 e6       	ldi	r24, 0x60	; 96
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_sendMsg>
	unsigned char  data_receive_uart = 0;
	while (1)
	
	{
		
		data_receive_uart = UART_getReceiveMsg('c',1);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	83 e6       	ldi	r24, 0x63	; 99
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 97 00 	call	0x12e	; 0x12e <UART_getReceiveMsg>
  ae:	f9 cf       	rjmp	.-14     	; 0xa2 <main+0x10>

000000b0 <__vector_11>:
}

/*************************************ISR***************************************/
#if TIMER0_TYPE == INTERRUPT
ISR(TIMER0_OVF_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <USART_TransmitPolling>:
	while (str[j]!=0)		/* Send string till null */
	{
		USART_TransmitPolling(str[j]);
		j++;
	}
}
  d8:	5d 9b       	sbis	0x0b, 5	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <USART_TransmitPolling>
  dc:	8c b9       	out	0x0c, r24	; 12
  de:	08 95       	ret

000000e0 <UART_init>:
void UART_init(void)
{
	
	
	// Set Baud Rate
	UBRRH = (uint16_t) (UART_BAUDE_RATE_UBRR >> 8);
  e0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t) (UART_BAUDE_RATE_UBRR);
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	89 b9       	out	0x09, r24	; 9
	
	UCSRC |= UART_UCSRC_ACCESS_msk | UART_DATA_SIZE_SELECTOR | UART_PARITY_MODE_SELECTOR | UART_STOP_BIT_SELECTOR ;
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	86 68       	ori	r24, 0x86	; 134
  ea:	80 bd       	out	0x20, r24	; 32
	
	/*// Set Frame Format
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
	//SYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
	*/
	UCSRB |= UART_UCSRB_RXEN | UART_UCSRB_TXEN ;
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	88 61       	ori	r24, 0x18	; 24
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	08 95       	ret

000000f4 <UART_sendMsg>:
*					returns STD_not_ok if it is not done correctly
* INPUTS :			const uint8, uint8
* OUTPUTS :			STD_RetType
*/
void UART_sendMsg(char *Msg,uint8 MsgLength)
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	fc 01       	movw	r30, r24
	//STD_RetType ret = STD_not_ok;/*sets initial value to avoid warinings*/
	
	/************* Add your code here******************/
	unsigned char j=0;
	
	while ((Msg[j]!= 0) && (j < MsgLength))	/* Send string till null */
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	81 f0       	breq	.+32     	; 0x124 <UART_sendMsg+0x30>
 104:	66 23       	and	r22, r22
 106:	71 f0       	breq	.+28     	; 0x124 <UART_sendMsg+0x30>
 108:	d6 2f       	mov	r29, r22
 10a:	8f 01       	movw	r16, r30
 10c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		//while (!( UCSRA & (1<<UDRE))); // Do nothing until UDR is ready
		//UDR = Msg[j];
			
		USART_TransmitPolling(Msg[j]);
 10e:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_TransmitPolling>
		j++;
 112:	cf 5f       	subi	r28, 0xFF	; 255
	//STD_RetType ret = STD_not_ok;/*sets initial value to avoid warinings*/
	
	/************* Add your code here******************/
	unsigned char j=0;
	
	while ((Msg[j]!= 0) && (j < MsgLength))	/* Send string till null */
 114:	f8 01       	movw	r30, r16
 116:	ec 0f       	add	r30, r28
 118:	f1 1d       	adc	r31, r1
 11a:	80 81       	ld	r24, Z
 11c:	88 23       	and	r24, r24
 11e:	11 f0       	breq	.+4      	; 0x124 <UART_sendMsg+0x30>
 120:	dc 13       	cpse	r29, r28
 122:	f5 cf       	rjmp	.-22     	; 0x10e <UART_sendMsg+0x1a>
		//ret = STD_ok;
	}
	
	
	//return ret;	
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <UART_getReceiveMsg>:

uint8 UART_getReceiveMsg(uint8 MsgPtr, uint8 MsgLengthPtr) 
{
	/************* Add your code here******************/	
	
	while (!( UCSRA & (1<<RXC))); // Do nothing until data have been received
 12e:	5f 9b       	sbis	0x0b, 7	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <UART_getReceiveMsg>
	MsgPtr = UDR ;
 132:	8c b1       	in	r24, 0x0c	; 12
	return MsgPtr;
	

}
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
