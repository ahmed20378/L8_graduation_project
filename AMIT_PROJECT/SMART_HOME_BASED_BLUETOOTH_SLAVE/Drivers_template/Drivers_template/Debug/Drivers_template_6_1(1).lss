
Drivers_template_6_1(1).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b61  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fc  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000058a  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000526  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000297  00000000  00000000  00002292  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_10>
  2c:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main()
{
	DDRB |= 0xff;
  92:	87 b3       	in	r24, 0x17	; 23
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
	
	
	
	UART_init();
  98:	0e 94 c7 00 	call	0x18e	; 0x18e <UART_init>
	//USART_TransmitPolling('z');
	
	//UART_SendString('0');
	
	UART_sendMsg("ahmed",5);
  9c:	65 e0       	ldi	r22, 0x05	; 5
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_sendMsg>
	while (1)
	
	{
		
		//LocalData = UART_getReceiveMsg('c',1);
		LocalData = USART_ReceivePolling();
  a8:	0e 94 c3 00 	call	0x186	; 0x186 <USART_ReceivePolling>
  ac:	c8 2f       	mov	r28, r24
		//UART_sendMsg(LocalData,1);
		USART_TransmitPolling(LocalData);
  ae:	99 27       	eor	r25, r25
  b0:	0e 94 bf 00 	call	0x17e	; 0x17e <USART_TransmitPolling>
		if (LocalData == '!')
  b4:	c1 32       	cpi	r28, 0x21	; 33
  b6:	61 f4       	brne	.+24     	; 0xd0 <main+0x3e>
		{
		    	PORTB |= (1<<3); // Writing LOW
  b8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e3       	ldi	r18, 0x3F	; 63
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x38>
  ca:	00 00       	nop
		    
						_delay_ms(1000);
						PORTB &= ~(1<<3);
  cc:	c3 98       	cbi	0x18, 3	; 24
  ce:	ec cf       	rjmp	.-40     	; 0xa8 <main+0x16>
		else if (LocalData == 0x128)
		{
			PORTB |= (1<<3); // Writing LOW
		
		}
		else if (LocalData == 'u')
  d0:	c5 37       	cpi	r28, 0x75	; 117
  d2:	11 f4       	brne	.+4      	; 0xd8 <main+0x46>
		{
			PORTB |= (1<<3); // Writing LOW
  d4:	c3 9a       	sbi	0x18, 3	; 24
  d6:	e8 cf       	rjmp	.-48     	; 0xa8 <main+0x16>
		
		}
		else if (LocalData == 'x')
  d8:	c8 37       	cpi	r28, 0x78	; 120
  da:	11 f4       	brne	.+4      	; 0xe0 <main+0x4e>
		{
			PORTB |= (1<<3); // Writing LOW
  dc:	c3 9a       	sbi	0x18, 3	; 24
  de:	e4 cf       	rjmp	.-56     	; 0xa8 <main+0x16>

		}
		else if (LocalData == '0')
  e0:	c0 33       	cpi	r28, 0x30	; 48
  e2:	11 f4       	brne	.+4      	; 0xe8 <main+0x56>
		{
			PORTB |= (1<<3); // Writing LOW
  e4:	c3 9a       	sbi	0x18, 3	; 24
  e6:	e0 cf       	rjmp	.-64     	; 0xa8 <main+0x16>

		}
		else if (LocalData == 'q')
  e8:	c1 37       	cpi	r28, 0x71	; 113
  ea:	11 f4       	brne	.+4      	; 0xf0 <main+0x5e>
		{
			PORTB |= (1<<3); // Writing LOW
  ec:	c3 9a       	sbi	0x18, 3	; 24
  ee:	dc cf       	rjmp	.-72     	; 0xa8 <main+0x16>

		}
		else if (LocalData == 't')
  f0:	c4 37       	cpi	r28, 0x74	; 116
  f2:	11 f4       	brne	.+4      	; 0xf8 <main+0x66>
		{
			PORTB |= (1<<3); // Writing LOW
  f4:	c3 9a       	sbi	0x18, 3	; 24
  f6:	d8 cf       	rjmp	.-80     	; 0xa8 <main+0x16>

			
	    }
		else if (LocalData == 'v')
  f8:	c6 37       	cpi	r28, 0x76	; 118
  fa:	a9 f4       	brne	.+42     	; 0x126 <main+0x94>
		{
			PORTB |= (1<<3); // Writing LOW
  fc:	c3 9a       	sbi	0x18, 3	; 24
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x72>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7c>
 10e:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1<<3);
 110:	c3 98       	cbi	0x18, 3	; 24
 112:	2f e3       	ldi	r18, 0x3F	; 63
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	93 e0       	ldi	r25, 0x03	; 3
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x86>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x90>
 122:	00 00       	nop
 124:	c1 cf       	rjmp	.-126    	; 0xa8 <main+0x16>
			_delay_ms(1000);
		}
		else if (LocalData == 'y')
 126:	c9 37       	cpi	r28, 0x79	; 121
 128:	09 f0       	breq	.+2      	; 0x12c <main+0x9a>
 12a:	be cf       	rjmp	.-132    	; 0xa8 <main+0x16>
		{
			PORTB |= (1<<3); // Writing LOW
 12c:	c3 9a       	sbi	0x18, 3	; 24
 12e:	2f e3       	ldi	r18, 0x3F	; 63
 130:	8d e0       	ldi	r24, 0x0D	; 13
 132:	93 e0       	ldi	r25, 0x03	; 3
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xa2>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xac>
 13e:	00 00       	nop
			_delay_ms(1000);
			PORTB &= ~(1<<3);
 140:	c3 98       	cbi	0x18, 3	; 24
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xb6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xc0>
 152:	00 00       	nop
 154:	a9 cf       	rjmp	.-174    	; 0xa8 <main+0x16>

00000156 <__vector_11>:
}

/*************************************ISR***************************************/
#if TIMER0_TYPE == INTERRUPT
ISR(TIMER0_OVF_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <USART_TransmitPolling>:
	while (str[j]!=0)		/* Send string till null */
	{
		USART_TransmitPolling(str[j]);
		j++;
	}
}
 17e:	5d 9b       	sbis	0x0b, 5	; 11
 180:	fe cf       	rjmp	.-4      	; 0x17e <USART_TransmitPolling>
 182:	8c b9       	out	0x0c, r24	; 12
 184:	08 95       	ret

00000186 <USART_ReceivePolling>:
 186:	5f 9b       	sbis	0x0b, 7	; 11
 188:	fe cf       	rjmp	.-4      	; 0x186 <USART_ReceivePolling>
 18a:	8c b1       	in	r24, 0x0c	; 12
 18c:	08 95       	ret

0000018e <UART_init>:
void UART_init(void)
{
	
	
	// Set Baud Rate
	UBRRH = (uint16_t) (UART_BAUDE_RATE_UBRR >> 8);
 18e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t) (UART_BAUDE_RATE_UBRR);
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	89 b9       	out	0x09, r24	; 9
	
	UCSRC |= UART_UCSRC_ACCESS_msk | UART_DATA_SIZE_SELECTOR | UART_PARITY_MODE_SELECTOR | UART_STOP_BIT_SELECTOR ;
 194:	80 b5       	in	r24, 0x20	; 32
 196:	86 68       	ori	r24, 0x86	; 134
 198:	80 bd       	out	0x20, r24	; 32
	
	/*// Set Frame Format
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
	//SYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
	*/
	UCSRB |= UART_UCSRB_RXEN | UART_UCSRB_TXEN ;
 19a:	8a b1       	in	r24, 0x0a	; 10
 19c:	88 61       	ori	r24, 0x18	; 24
 19e:	8a b9       	out	0x0a, r24	; 10
 1a0:	08 95       	ret

000001a2 <UART_sendMsg>:
*					returns STD_not_ok if it is not done correctly
* INPUTS :			const uint8, uint8
* OUTPUTS :			STD_RetType
*/
STD_RetType UART_sendMsg(const uint8 Msg[],uint8 MsgLength)
{
 1a2:	dc 01       	movw	r26, r24
		//UDR = Msg;
	
	
	unsigned char j=0;
	
	while ((Msg[j]!= 0) && (j < MsgLength))	/* Send string till null */
 1a4:	2c 91       	ld	r18, X
 1a6:	22 23       	and	r18, r18
 1a8:	79 f0       	breq	.+30     	; 0x1c8 <UART_sendMsg+0x26>
 1aa:	66 23       	and	r22, r22
 1ac:	69 f0       	breq	.+26     	; 0x1c8 <UART_sendMsg+0x26>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		while (!( UCSRA & (1<<UDRE))); // Do nothing until UDR is ready
 1b0:	5d 9b       	sbis	0x0b, 5	; 11
 1b2:	fe cf       	rjmp	.-4      	; 0x1b0 <UART_sendMsg+0xe>
		UDR = Msg[j];
 1b4:	2c b9       	out	0x0c, r18	; 12
			
		//USART_TransmitPolling(str[j]);
		j++;
 1b6:	9f 5f       	subi	r25, 0xFF	; 255
		//UDR = Msg;
	
	
	unsigned char j=0;
	
	while ((Msg[j]!= 0) && (j < MsgLength))	/* Send string till null */
 1b8:	fd 01       	movw	r30, r26
 1ba:	e9 0f       	add	r30, r25
 1bc:	f1 1d       	adc	r31, r1
 1be:	20 81       	ld	r18, Z
 1c0:	22 23       	and	r18, r18
 1c2:	11 f0       	breq	.+4      	; 0x1c8 <UART_sendMsg+0x26>
 1c4:	69 13       	cpse	r22, r25
 1c6:	f4 cf       	rjmp	.-24     	; 0x1b0 <UART_sendMsg+0xe>
		//ret = STD_ok;
	}
	
	
	return ret;	
}
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
