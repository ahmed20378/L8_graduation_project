
Drivers_template_6_1(6).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3b  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ea  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bb  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000564  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023f  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000024d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_10>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main()
{ 
	DDRC=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	UART_init();                   /**UART_INITIALZETION**/   
  80:	0e 94 81 00 	call	0x102	; 0x102 <UART_init>
	PORTC=0X01;                   /**UART_FLAG_LED_UART_ENABLE**/
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 bb       	out	0x15, r24	; 21
	SPI_INITI_MASTER();          /**SPI_INITIALZETION**/
  88:	0e 94 5f 00 	call	0xbe	; 0xbe <SPI_INITI_MASTER>
	
	while (1)
	
	{
		
		UART_DATA_RECEIVE = UART_getReceiveMsg('c',1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	83 e6       	ldi	r24, 0x63	; 99
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 8b 00 	call	0x116	; 0x116 <UART_getReceiveMsg>
		if (UART_DATA_RECEIVE=='1')
  98:	81 33       	cpi	r24, 0x31	; 49
  9a:	29 f4       	brne	.+10     	; 0xa6 <main+0x2a>
		{
			SPI_SEND_DATA('2');	
  9c:	82 e3       	ldi	r24, 0x32	; 50
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_SEND_DATA>
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0x10>
		}
		
		else if (UART_DATA_RECEIVE=='2')
  a6:	82 33       	cpi	r24, 0x32	; 50
  a8:	29 f4       	brne	.+10     	; 0xb4 <main+0x38>
		{
			SPI_SEND_DATA('2');	
  aa:	82 e3       	ldi	r24, 0x32	; 50
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_SEND_DATA>
  b2:	ec cf       	rjmp	.-40     	; 0x8c <main+0x10>
		}
		else
		{
			SPI_SEND_DATA('e');             /** error **/
  b4:	85 e6       	ldi	r24, 0x65	; 101
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_SEND_DATA>
  bc:	e7 cf       	rjmp	.-50     	; 0x8c <main+0x10>

000000be <SPI_INITI_MASTER>:
void SPI_INITI_SLAVE()
{
	
	DDRB &= ~((1<<MASTER_OUT_SLAVE_IN)|(1<<CLOCK_SELECT)|(1<<CHIP_SELECT));  /* Make MOSI, SCK, SS as input pins */
	DDRB |= (1<<MASTER_IN_SLAVE_OUT);			/* Make MISO pin as output pin */
	SPCR = (1<<SPE);			/* Enable SPI in slave mode */
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 6b       	ori	r24, 0xB0	; 176
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	be 98       	cbi	0x17, 6	; 23
  c6:	c4 9a       	sbi	0x18, 4	; 24
  c8:	81 e5       	ldi	r24, 0x51	; 81
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	70 98       	cbi	0x0e, 0	; 14
  ce:	08 95       	ret

000000d0 <SPI_SEND_DATA>:

}
void SPI_SEND_DATA(char data)
{
	char flush_buffer;
	SPDR = data;			/* Write data to SPI data register */
  d0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
  d2:	77 9b       	sbis	0x0e, 7	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <SPI_SEND_DATA+0x2>
	flush_buffer = SPDR;		/* Flush received data */
  d6:	8f b1       	in	r24, 0x0f	; 15
  d8:	08 95       	ret

000000da <__vector_11>:
}

/*************************************ISR***************************************/
#if TIMER0_TYPE == INTERRUPT
ISR(TIMER0_OVF_vect)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_10>:

ISR(TIMER0_COMP_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <UART_init>:
		//ret = STD_ok;
	}
	
	
	//return ret;	
}
 102:	10 bc       	out	0x20, r1	; 32
 104:	87 e6       	ldi	r24, 0x67	; 103
 106:	89 b9       	out	0x09, r24	; 9
 108:	80 b5       	in	r24, 0x20	; 32
 10a:	86 68       	ori	r24, 0x86	; 134
 10c:	80 bd       	out	0x20, r24	; 32
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	88 61       	ori	r24, 0x18	; 24
 112:	8a b9       	out	0x0a, r24	; 10
 114:	08 95       	ret

00000116 <UART_getReceiveMsg>:

uint8 UART_getReceiveMsg(uint8 MsgPtr, uint8 MsgLengthPtr) 
{
	/************* Add your code here******************/	
	
	while (!( UCSRA & (1<<RXC))); // Do nothing until data have been received
 116:	5f 9b       	sbis	0x0b, 7	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <UART_getReceiveMsg>
	MsgPtr = UDR ;
 11a:	8c b1       	in	r24, 0x0c	; 12
	return MsgPtr;
	

}
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
