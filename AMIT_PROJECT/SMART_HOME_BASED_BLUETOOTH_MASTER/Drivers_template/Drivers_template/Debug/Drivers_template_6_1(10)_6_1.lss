
Drivers_template_6_1(10)_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b42  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087c  00000000  00000000  00000e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000666  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058b  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020b  00000000  00000000  0000242b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002636  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_10>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SMART_HOME_WITH_SPI_MASTER>:
 */ 
#include <avr/io.h>
void SMART_HOME_WITH_SPI_MASTER()
{ 
			char UART_DATA_RECEIVE ;
			UART_DATA_RECEIVE = UART_getReceiveMsg();
  7c:	0e 94 80 00 	call	0x100	; 0x100 <UART_getReceiveMsg>
			if (UART_DATA_RECEIVE != 0)
  80:	88 23       	and	r24, r24
  82:	21 f0       	breq	.+8      	; 0x8c <SMART_HOME_WITH_SPI_MASTER+0x10>
			{
				PORTC =0;
  84:	15 ba       	out	0x15, r1	; 21
				SPI_SEND_DATA(UART_DATA_RECEIVE);
  86:	99 27       	eor	r25, r25
  88:	0e 94 5d 00 	call	0xba	; 0xba <SPI_SEND_DATA>
  8c:	08 95       	ret

0000008e <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main()
{ 
	DDRC=0xff;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	84 bb       	out	0x14, r24	; 20
	UART_init();                   /**UART_INITIALZETION**/   
  92:	0e 94 76 00 	call	0xec	; 0xec <UART_init>
	PORTC=0X01;                   /**UART_FLAG_LED_UART_ENABLE**/
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	85 bb       	out	0x15, r24	; 21
	SPI_INITI_MASTER();          /**SPI_INITIALZETION**/
  9a:	0e 94 52 00 	call	0xa4	; 0xa4 <SPI_INITI_MASTER>
	
	while (1)
	
	{
		
	SMART_HOME_WITH_SPI_MASTER();
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <SMART_HOME_WITH_SPI_MASTER>
  a2:	fd cf       	rjmp	.-6      	; 0x9e <main+0x10>

000000a4 <SPI_INITI_MASTER>:
void SPI_INITI_SLAVE()
{
	
	DDRB &= ~((1<<MASTER_OUT_SLAVE_IN)|(1<<CLOCK_SELECT)|(1<<CHIP_SELECT));  /* Make MOSI, SCK, SS as input pins */
	DDRB |= (1<<MASTER_IN_SLAVE_OUT);			/* Make MISO pin as output pin */
	SPCR = (1<<SPE);			/* Enable SPI in slave mode */
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	80 6b       	ori	r24, 0xB0	; 176
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	be 98       	cbi	0x17, 6	; 23
  ac:	c4 9a       	sbi	0x18, 4	; 24
  ae:	81 e5       	ldi	r24, 0x51	; 81
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	70 98       	cbi	0x0e, 0	; 14
  b4:	c4 98       	cbi	0x18, 4	; 24
  b6:	c4 98       	cbi	0x18, 4	; 24
  b8:	08 95       	ret

000000ba <SPI_SEND_DATA>:

}
void SPI_SEND_DATA(char data)
{
	char flush_buffer;
	SPDR = data;			/* Write data to SPI data register */
  ba:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <SPI_SEND_DATA+0x2>
	flush_buffer = SPDR;		/* Flush received data */
  c0:	8f b1       	in	r24, 0x0f	; 15
  c2:	08 95       	ret

000000c4 <__vector_11>:
}

/*************************************ISR***************************************/
#if TIMER0_TYPE == INTERRUPT
ISR(TIMER0_OVF_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <UART_init>:
		//ret = STD_ok;
	}
	
	
	//return ret;	
}
  ec:	10 bc       	out	0x20, r1	; 32
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	89 b9       	out	0x09, r24	; 9
  f2:	80 b5       	in	r24, 0x20	; 32
  f4:	86 68       	ori	r24, 0x86	; 134
  f6:	80 bd       	out	0x20, r24	; 32
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	08 95       	ret

00000100 <UART_getReceiveMsg>:

char UART_getReceiveMsg() 
{
	/************* Add your code here******************/	
	
	while (!( UCSRA & (1<<RXC))); // Do nothing until data have been received
 100:	5f 9b       	sbis	0x0b, 7	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <UART_getReceiveMsg>
	return UDR;
 104:	8c b1       	in	r24, 0x0c	; 12
	
}
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
