
Drivers_template_6_1(10)_6_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000677  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009c  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_10>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main()
{ 
	DDRA=0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
    SPI_INITI_SLAVE();          /**SPI_INITIALZETION**/
  80:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_INITI_SLAVE>
			PORTA=0X01;
		}
		
		else if (SPI_DATA_RECEIVE=='2')
		{
			PORTA=0X02;
  84:	d2 e0       	ldi	r29, 0x02	; 2
	{
		
		SPI_DATA_RECEIVE = SPI_RECEIVE_DATA();
		if (SPI_DATA_RECEIVE=='1')
		{
			PORTA=0X01;
  86:	c1 e0       	ldi	r28, 0x01	; 1
	
	while (1)
	
	{
		
		SPI_DATA_RECEIVE = SPI_RECEIVE_DATA();
  88:	0e 94 57 00 	call	0xae	; 0xae <SPI_RECEIVE_DATA>
		if (SPI_DATA_RECEIVE=='1')
  8c:	81 33       	cpi	r24, 0x31	; 49
  8e:	11 f4       	brne	.+4      	; 0x94 <main+0x18>
		{
			PORTA=0X01;
  90:	cb bb       	out	0x1b, r28	; 27
  92:	fa cf       	rjmp	.-12     	; 0x88 <main+0xc>
		}
		
		else if (SPI_DATA_RECEIVE=='2')
  94:	82 33       	cpi	r24, 0x32	; 50
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x20>
		{
			PORTA=0X02;
  98:	db bb       	out	0x1b, r29	; 27
  9a:	f6 cf       	rjmp	.-20     	; 0x88 <main+0xc>
		}
		else
		{
			PORTA=0X00;             /** error **/
  9c:	1b ba       	out	0x1b, r1	; 27
  9e:	f4 cf       	rjmp	.-24     	; 0x88 <main+0xc>

000000a0 <SPI_INITI_SLAVE>:
void SPI_SEND_DATA(char data)
{
	char flush_buffer;
	SPDR = data;			/* Write data to SPI data register */
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
	flush_buffer = SPDR;		/* Flush received data */
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	8f 74       	andi	r24, 0x4F	; 79
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	be 9a       	sbi	0x17, 6	; 23
  a8:	80 e4       	ldi	r24, 0x40	; 64
  aa:	8d b9       	out	0x0d, r24	; 13
  ac:	08 95       	ret

000000ae <SPI_RECEIVE_DATA>:

}
void SPI_RECEIVE_DATA()
{

		SPDR = 0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <SPI_RECEIVE_DATA+0x4>
		return(SPDR);			/* Return received data */
  b6:	8f b1       	in	r24, 0x0f	; 15
  b8:	08 95       	ret

000000ba <__vector_11>:
}

/*************************************ISR***************************************/
#if TIMER0_TYPE == INTERRUPT
ISR(TIMER0_OVF_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_10>:

ISR(TIMER0_COMP_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
	/************* Add your code here******************/	
	
}
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
